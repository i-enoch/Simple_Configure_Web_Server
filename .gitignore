# How to Ignore Files and Folders in Git: .gitignore File
# https://www.freecodecamp.org/news/gitignore-file-how-to-ignore-files-and-folders-in-git/
# Don’t share some files or parts of the project with others.
# In other words, you don’t want to include or commit those specific files to the main version of the project. 
# This is why you may not want to use the period . with the git add command as this stages every single file in the current Git directory.
# When you use the git commit command, every single file gets committed – this also includes files that do not need to be or shouldn’t be.
# You may instead want Git to ignore specific files, but there is no git ignore command for that purpose.
# So, how do you tell Git to ignore and not track specific files? With a .gitignore file.

# For example, if you want to ignore a text.txt file located in the root directory: /text.txt
# And if you wanted to ignore a text.txt file located in a test directory at the root directory: /test/text.txt or test/text.txt
# If you want to ignore all files with a specific name, you need to write the literal name of the file: text.txt
# In this case, you don't need to provide the full path to a specific file. This pattern will ignore all files with 
# that particular name that are located anywhere in the project.
# To ignore an entire directory with all its contents, you need to include the name of the directory with the slash / at the end: test/
# This command will ignore any directory (including other files and other sub-directories inside the directory) named test located anywhere in your project.
# Something to note is that if you write the name of a file alone or the name of the directory alone without the slash /, then 
# this pattern will match both any files or directories with that name: test

# What if you want to ignore any files or directories that start with a specific word?
# Say that you want to ignore all files and directories that have a name starting with img. 
# To do this, you would need to specify the name you want to ignore followed by the * wildcard selector like so: img*

# But what if you want to ignore any files or directories that end with a specific word?
# If you wanted to ignore all files that end with a specific file extension, you would need to use the * wildcard selector 
# followed by the file extension you want to ignore. 
# For example, if you wanted to ignore all markdown files that end with a .md file extension: *.md
# This pattern will match any file ending with the .md extension located anywhere in the project.

# Earlier, you saw how to ignore all files ending with a specific suffix. What happens when you want to make an exception, 
# and there is one file with that suffix that you don't want to ignore?
# Say you added the following to your .gitignore file: .md
# This pattern ignores all files ending in .md, but you don't want Git to ignore a README.md file.
# To do this, you would need to use the negating pattern with an exclamation mark, !, to negate a file that would otherwise be ignored:
# # ignores all .md files
# .md
# # does not ignore the README.md file
# !README.md
# Something to keep in mind is that this pattern will not work if you ignore an entire directory.
# Say that you ignore all test directories: test/
# Say that inside a test folder, you have a file, example.md, that you don't want to ignore.
# You cannot negate a file inside an ignored directory like so:
# # ignore all directories with the name test
# test/
# # trying to negate a file inside an ignored directory won't work
# !test/example.md

# How to Ignore a Previously Committed File?
# It's a best practice to create a .gitignore file with all the files and the different file patterns you want 
# to ignore when you create a new repository – before committing it.
# Git can only ignore untracked files that haven't yet been committed to the repository.
# What happens when you have already committed a file in the past and wish you hadn't?
# Say you accidentally committed a .env file that stores environment variables.
# You first need to update the .gitignore file to include the .env file:
# # add .env file to .gitignore
# echo ".env" >> .gitignore
# Now, you will need to tell Git not to track this file by removing it from the index: git rm --cached .env
# The git rm command, along with the --cached option, deletes the file from the repository but does not delete the actual file. 
# This means the file remains on your local system and in your working directory as an ignored file.
# A git status will show that the file is no longer in the repository, and entering the ls command will show that the file exists on your local file system.
# If you want to delete the file from the repository and your local system, omit the --cached option.

# Next, add the .gitignore to the staging area using the git add command: git add .gitignore
# Finally, commit the .gitignore file using the git commit command: git commit -m "update ignored files"

.terraform/
.terraform.*
/main.tf.old
terraform.*